var documenterSearchIndex = {"docs":
[{"location":"gas/#Representing-ideal-gases","page":"Gas and Species","title":"Representing ideal gases","text":"","category":"section"},{"location":"gas/#Pure-(single-component)-gases","page":"Gas and Species","title":"Pure (single-component) gases","text":"","category":"section"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"IdealGasThermo.jl exports the species type which stores relevant thermodynamic information about a single element/compound. See readThermo.","category":"page"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"species","category":"page"},{"location":"gas/#IdealGasThermo.species","page":"Gas and Species","title":"IdealGasThermo.species","text":"species <: AbstractSpecies\n\nspecies is a structure that holds the NASA 9 polynomial coefficients alow and ahigh  for the two temprature regions separated by Tmid  (here we only work with temperature less than 6000 K so typically only 2 T intervals required) the molecular weight MW and the heat of formation Hf (J/mol) for a given chemical species (at 298.15 K).\n\nSee here for typical data format\n\n\n\n\n\n","category":"type"},{"location":"gas/#Composite-species","page":"Gas and Species","title":"Composite species","text":"","category":"section"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"composite_species","category":"page"},{"location":"gas/#IdealGasThermo.composite_species","page":"Gas and Species","title":"IdealGasThermo.composite_species","text":"composite_species <: AbstractSpecies\n\nRepresents a gas mixture of multiple components as a  psuedo-species by calculating an equivalent set of polynomials  defining c_p, h, and s.  \n\nSee here for a more detailed explanation.\n\n\n\n\n\n","category":"type"},{"location":"gas/#Gas-mixtures","page":"Gas and Species","title":"Gas mixtures","text":"","category":"section"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"IdealGasThermo.jl exports the Gas type which stores relevant thermodynamic information about the gas mixture.","category":"page"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"Gas\nGas()\nBase.setproperty!(gas::Gas, sym::Symbol, val::Float64)","category":"page"},{"location":"gas/#IdealGasThermo.Gas","page":"Gas and Species","title":"IdealGasThermo.Gas","text":"Gas{N}\n\nA type that represents an ideal gas that is calorically perfect  i.e. c_p(T), h(T), phi(T) and s(TP).\n\n\n\n\n\n","category":"type"},{"location":"gas/#IdealGasThermo.Gas-Tuple{}","page":"Gas and Species","title":"IdealGasThermo.Gas","text":"Gas()\n\nConstructor that returns a Gas type representing  Air at standard conditions\n\nSee also Gas.\n\nExamples\n\njulia> Gas()\nIdeal Gas at\n  T =  298.150 K\n  P =  101.325 kPa\n cp =   29.102 J/K/mol\n  h =   -0.126 kJ/mol\n  s =    0.199 kJ/K/mol\n\nwith composition:\n-----------------------------\n Species        Y·µ¢  MW[g/mol]\n-----------------------------\n     Air     1.000     28.965\n-----------------------------\n     Œ£Y·µ¢     1.000     28.965\n\n\n\n\n\n","category":"method"},{"location":"gas/#Base.setproperty!-Tuple{Gas, Symbol, Float64}","page":"Gas and Species","title":"Base.setproperty!","text":"Base.setproperty!(gas::Gas, s::Symbol, val)\n\n\n\n\n\n","category":"method"},{"location":"gas/#Single-component-gases","page":"Gas and Species","title":"Single component gases","text":"","category":"section"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"Gas1D type objects are a subtype of AbstractGas which allows us to use most of the functions that work with Gas. Gas1D types additionally store a representation of the composite species (composite_species). See here for the theory of representing fixed composition multi-component mixtures as single component mixtures.","category":"page"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"Gas1D\nGas1D()\nGas1D(sp::composite_species)","category":"page"},{"location":"gas/#IdealGasThermo.Gas1D","page":"Gas and Species","title":"IdealGasThermo.Gas1D","text":"Gas1D\n\nType that represents single component gases.\n\n\n\n\n\n","category":"type"},{"location":"gas/#IdealGasThermo.Gas1D-Tuple{}","page":"Gas and Species","title":"IdealGasThermo.Gas1D","text":"Gas1D()\n\nConstructor that returns a Gas1D type representing  Dry Air at standard conditions\n\nSee also Gas1D.\n\n\n\n\n\n","category":"method"},{"location":"gas/#IdealGasThermo.Gas1D-Tuple{composite_species}","page":"Gas and Species","title":"IdealGasThermo.Gas1D","text":"Gas1D(sp::composite_species)\n\nConstructor that returns a Gas type representing  Dry Air at standard conditions\n\nSee also Gas1D.\n\n\n\n\n\n","category":"method"},{"location":"gas/#Setting-the-thermodynamic-state-of-the-gas","page":"Gas and Species","title":"Setting the thermodynamic state of the gas","text":"","category":"section"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"The following functions let you set the thermodynamic state of the gas.  These functions change the state of the gas in place i.e., the gas object is modified and no new copy is created.","category":"page"},{"location":"gas/","page":"Gas and Species","title":"Gas and Species","text":"set_h!\nset_hP!\nset_TP!\nset_Œîh!","category":"page"},{"location":"gas/#IdealGasThermo.set_h!","page":"Gas and Species","title":"IdealGasThermo.set_h!","text":"set_h!(gas::AbstractGas, hspec::Float64)\n\nCalculates gas temperature for a specified enthalpy via a non-linear  Newton-Raphson method.\n\nExamples\n\njulia> gas = Gas();\njulia> set_h!(gas, 0.0)\nIdeal Gas at\n  T =  302.463 K\n  P =  101.325 kPa\n cp =   29.108 J/K/mol\n  h =    0.000 kJ/mol\n  s =    0.199 kJ/K/mol\n\nwith composition:\n-----------------------------\n Species        Y·µ¢  MW[g/mol]\n-----------------------------\n     Air     1.000     28.965\n-----------------------------\n     Œ£Y·µ¢     1.000     28.965\n\n\n\n\n\n","category":"function"},{"location":"gas/#IdealGasThermo.set_hP!","page":"Gas and Species","title":"IdealGasThermo.set_hP!","text":"set_hP!(gas::AbstractGas, hspec::Float64, P::Float64)\n\nCalculates state of the gas given enthalpy and pressure (h,P)\n\n\n\n\n\n","category":"function"},{"location":"gas/#IdealGasThermo.set_TP!","page":"Gas and Species","title":"IdealGasThermo.set_TP!","text":"set_TP!(gas::AbstractGas, T::Float64, P::Float64)\n\nCalculates state of the gas given Temperature and pressure (T,P) in K and Pa respectively.\n\nExamples\n\njulia> gas = Gas(); # Create an ideal gas consisting of air at std. conditions\njulia> set_TP!(gas, 298.15*2, 101325.0*2)\nIdeal Gas at\n  T =  596.300 K\n  P =  202.650 kPa\n cp =   30.418 J/K/mol\n  h =    8.706 kJ/mol\n  s =    0.214 kJ/K/mol\n\nwith composition:\n-----------------------------\n Species        Y·µ¢  MW[g/mol]\n-----------------------------\n     Air     1.000     28.965\n-----------------------------\n     Œ£Y·µ¢     1.000     28.965\n\n\n\n\n\n","category":"function"},{"location":"gas/#IdealGasThermo.set_Œîh!","page":"Gas and Species","title":"IdealGasThermo.set_Œîh!","text":"set_Œîh!(gas::AbstractGas, Œîhspec::Float64, Œ∑p::Float64 = 1.0)\n\nSets the gas state based on a specified change in enthalpy (Œîh) [J/mol], and a given polytropic efficiency. This represents adding or removing some work from the gas.\n\n\n\n\n\n","category":"function"},{"location":"idealgasthermo/#Thermodynamic-properties-of-ideal-gases","page":"Ideal gas thermodynamics","title":"Thermodynamic properties of ideal gases","text":"","category":"section"},{"location":"idealgasthermo/#Calculating-c_p,-h,-s","page":"Ideal gas thermodynamics","title":"Calculating c_p h s","text":"","category":"section"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"The c_p h s of a particular species is calculated using the following NASA-9 polynomials:","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"beginaligned\ncphatR = frachatc_p^circ(T)overlineR =\n a_1T^-2\n+ a_2 T^-1 \n+ a_3 \n+ a_4 T \n+ a_5T^2 \n+ a_6 T^3 \n+ a_7 T^4 \n   \nhhatRT = \n-a_1T^-2\n+ a_2fracln(T)T\n+ a_3 \n+ a_4fracT2 \n+ a_5fracT^23 \n+ a_6fracT^34 \n+ a_7fracT^45 \n+ fracb_1T\n\nfrachatphi^circ(T)Ru = \n-a_1fracT^-22\n- a_2T^-1 \n+ a_3 ln(T) \n+ a_4 T \n+ a_5 fracT^22 \n+ a_6 fracT^33 \n+ a_7 fracT^44 \n+ b_2 \n endaligned","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"where the ^circ and hat  denote standard pressure (P_mathrmstd=101325 mathrmkPa) and molar basis respectively and Ru = 83144 mathrmJ mol^-1  K^-1 is the universal gas constant. ","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"hatphi^circis the entropy complement function (we use phi instead of s to emphasize that the entropy complement is only a function of temperature and not, in general, equal to the entropy) and is equal to hats^circ only at standard pressure. At any pressure other than Pstd the entropy hats is given by,","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"frachats(T)Ru = phihatR - lnfracPPstd","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"IdealGasThermo.Cp\nIdealGasThermo.h\nIdealGasThermo.ùúô","category":"page"},{"location":"idealgasthermo/#IdealGasThermo.Cp","page":"Ideal gas thermodynamics","title":"IdealGasThermo.Cp","text":"Cp(Tarray::AbstractVector{T}, a::AbstractVector{T}) where T\n\nCalculates cp of the given species in J/K/mol (This is a completely non-allocating operation.)\n\nCp0/R = a‚ÇÅT‚Åª¬≤ + a‚ÇÇT‚Åª¬π + a‚ÇÉ + a‚ÇÑT + a‚ÇÖT¬≤ + a‚ÇÜT¬≥ + a‚ÇáT‚Å¥\n\n\n\n\n\nCp(T, sp::AbstractSpecies)\n\nCalculates cp for a species type in J/K/kg.\n\n\n\n\n\n","category":"function"},{"location":"idealgasthermo/#IdealGasThermo.h","page":"Ideal gas thermodynamics","title":"IdealGasThermo.h","text":"h(TT::AbstractVector{type}, a::AbstractVector{type}) where type\n\nCalculates h of the given species in J/mol\n\nCalcualted by:\n\nH0/RT = -a1*T^-2 + a2*T^-1*ln(T) + a3 + a4*T/2 + a5*T^2/3 + a6*T^3/4 + a7*T^4/5 + b1/T\n      = -a1*T‚ÇÅ   + a2*T‚ÇÇ*T‚Çà      + a3 + a4*T‚ÇÑ/2 + a5*T‚ÇÖ/3  + a6*T‚ÇÜ/4  + a7*T‚Çá/5  + a‚Çà*T‚ÇÇ\n\n\n\n\n\nh(T, sp::AbstractSpecies)\n\nCalculates h for a species in J/kg\n\n\n\n\n\n","category":"function"},{"location":"idealgasthermo/#IdealGasThermo.ùúô","page":"Ideal gas thermodynamics","title":"IdealGasThermo.ùúô","text":"ùúô(TT::AbstractVector{type},a::AbstractVector{type}) where type\n\nCalculates the entropy complement function ùúô=‚à´(c‚Çö/T)dT in J/K/mol\n\nThis is calculated at standard state. Tref = 298.15 K, Pref = 101325 Pa.\n\nS0/R = -a1*T^-2/2 - a2*T^-1 + a3*ln(T) + a4*T + a5*T^2/2 + a6*T^3/3.0 + a7*T^4/4 + b2 \n     = -a1*T‚ÇÅ/2   - a2*T‚ÇÇ   + a3*T‚Çà    + a4*T‚ÇÑ+ a5*T‚ÇÖ/2  + a6*T‚ÇÜ/3.0  + a7*T‚Çá/4  + a‚Çâ   \n\n\n\n\n\n","category":"function"},{"location":"idealgasthermo/#mixthermo","page":"Ideal gas thermodynamics","title":"Representing mixtures","text":"","category":"section"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"The molar specific heat, enthalpy, and entropy of a mixture of ideal gases at standard pressure, Pstd, is given by,","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"beginaligned\ncpbarR = sum_i=1^n XileftcphatRright_i\nhbarRT = sum_i=1^n XilefthhatRTright_i\nphibarR = sum_i=1^n XileftphihatRright_i + Xi lnXi\n\n\nendaligned","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"The term Xi lnXi in the entropy complement function represents the entropy of mixing when multiple species are present in the gas mixture.","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"When P neq Pstd, hatc_p, hath, and phi are as above but s has a pressure term.","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"beginaligned\noverlinefrachatc_p (T)Ru = cpbarR = sum_i=1^n XileftcphatRright_i\noverlinefrachath (T)Ru T = hbarRT = sum_i=1^n XilefthhatRTright_i\noverlinefrachatphi(T)Ru = phibarR = sum_i=1^n XileftphihatRright_i + Xi lnXi \noverlinefrachats(T)Ru = sum_i=1^n XileftphihatRright_i + Xi lnXi - Xi lnfracPPstd\n\n\nendaligned","category":"page"},{"location":"idealgasthermo/#gas1dthermo","page":"Ideal gas thermodynamics","title":"Representing mixtures with fixed composition","text":"","category":"section"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"For mixtures with fixed composition these calculations can be considerably sped up (see performance) by defining an equivalent set of coefficients left(bara_1 mathrmtobara_7 mathrmand barb_1barb_2right) as follows:","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"beginaligned\ncpbarR = frachatc_p^circ(T)overlineR =\n  bara_1T^-2\n+ bara_2 T^-1 \n+ bara_3 \n+ bara_4 T \n+ bara_5T^2 \n+ bara_6 T^3 \n+ bara_7 T^4 \n   \nhbarRT = \n- bara_1T^-2\n+ bara_2fracln(T)T\n+ bara_3 \n+ bara_4fracT2 \n+ bara_5fracT^23 \n+ bara_6fracT^34 \n+ bara_7fracT^45 \n+ fracbarb_1T\n\nphibarR = \n- bara_1fracT^-22\n- bara_2T^-1 \n+ bara_3 ln(T) \n+ bara_4 T \n+ bara_5 fracT^22 \n+ bara_6 fracT^33 \n+ bara_7 fracT^44 \n+ barb_2 \n endaligned","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"where for each species i in the mixture (containing n individual species),","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"beginaligned\nbara_j = sum_i=1^n a_ji forall i in n \nbarb_1 = sum_i=1^n b_1i forall i in n \nbarb_2 = sum_i=1^n left(b_2i + Xi lnXi right)forall i in n\nendaligned\n","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"The coefficients on the right-hand side are the original NASA-9 polynomial coefficients for each component species.","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"note: Note!\nThe coefficient b_2 (the constant of integration to get phi or s) includes the entropy of mixing term Xi lnXi.","category":"page"},{"location":"idealgasthermo/#Thermodynamic-derivatives","page":"Ideal gas thermodynamics","title":"Thermodynamic derivatives","text":"","category":"section"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"Additionally it is also useful to calculate the following derivatives,","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"beginaligned\nfracd hd T  = c_p\nfracdsdT = fracdphidT  = fracc_pT\nfracd c_pd T  = R_mathrmunivleft(-2a_1T^-3 - a_2 T^-2 \n+ a_4 + 2a_5T + 3a_6T^2 + 4a_7T^3right)\nendaligned","category":"page"},{"location":"idealgasthermo/","page":"Ideal gas thermodynamics","title":"Ideal gas thermodynamics","text":"where the last derivative displaystyle fracdc_pdT is obtained by differentiating  the polynomial representation of c_p.","category":"page"},{"location":"combustion/#Modeling-combustion","page":"Combustion","title":"Modeling combustion","text":"","category":"section"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"IdealGasThermo allows us to perform simple combustion calculations.  The following functions are useful utilites to do so.","category":"page"},{"location":"combustion/#Calculating-stoichiometric-fuel-oxidizer-ratio","page":"Combustion","title":"Calculating stoichiometric fuel-oxidizer ratio","text":"","category":"section"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"For an arbitrary fuel of type genfuel we can write a general equation representing the combustion of 1 mole of fuel,","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"genfuel + n_mathrmO_2 mathrmO_2 \nlongrightarrow \nn_mathrmCO_2 mathrmCO_2 + n_mathrmH_2mathrmO mathrmH_2mathrmO \n+ n_mathrmN_2 mathrmN_2\n","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"where the number of moles of the different species is given by balancing the reaction:","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"beginaligned\nn_rmCO_2 = x_mathrmC tag1\nn_rmH_2O = fracx_mathrmH2\nn_rmN_2 = fracx_mathrmN2\nn_rmO_2 = x_mathrmC + fracx_mathrmH4 - fracx_mathrmO2\nendaligned","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"The molar fuel-oxygen ratio f is then displaystylefrac1n_rmO_2. If the oxidzier is not pure oxygen then the stoichiometric molar  fuel-oxidizer ratio is given by  displaystylef_textstoich=fracX_rmO_2n_rmO_2 ,  where X_rmO_2 is the mole fraction of oxygen in the oxidizer (e.g., X_rmO_2 approx 021 in dry air). ","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"This reaction can also be written as","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"genfuel\nlongrightarrow \nn_mathrmCO_2 mathrmCO_2 + n_mathrmH_2mathrmO mathrmH_2mathrmO \n+ n_mathrmN_2 mathrmN_2\n- n_mathrmO_2 mathrmO_2 ","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"which can be read as \"the complete combustion of 1 mole of fuel (genfuel) consumes n_mathrmO_2 moles of mathrmO_2 and produces n_mathrmCO_2 moles of mathrmCO_2, n_mathrmH_2mathrmO moles of mathrmH_2mathrmO, and n_mathrmN_2 moles of mathrmN_2\".","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"IdealGasThermo.fuelbreakdown\nIdealGasThermo.stoich_molar_fuel_oxy_ratio\nIdealGasThermo.stoich_molar_FOR\nIdealGasThermo.stoich_FOR\nIdealGasThermo.reaction_change_fraction\nIdealGasThermo.reaction_change_molar_fraction","category":"page"},{"location":"combustion/#IdealGasThermo.fuelbreakdown","page":"Combustion","title":"IdealGasThermo.fuelbreakdown","text":"fuelbreakdown(fuel::String)\n\nReturns the number of C, H, O, and N atoms that the fuel is composed of.\n\nExamples\n\n\njulia> IdealGasThermo.fuelbreakdown(\"CH4\")' #transpose is simply to save space in the docs\n1√ó4 adjoint(::Vector{Float64}) with eltype Float64:\n 1.0  4.0  0.0  0.0\n\njulia> IdealGasThermo.fuelbreakdown(\"C12H23.5\")'\n1√ó4 adjoint(::Vector{Float64}) with eltype Float64:\n 12.0  23.5  0.0  0.0\n\njulia> IdealGasThermo.fuelbreakdown(\"CH3COOH\")'\n1√ó4 adjoint(::Vector{Float64}) with eltype Float64:\n 2.0  4.0  2.0  0.0\n\njulia> IdealGasThermo.fuelbreakdown(\"CH3CH2OH\")'\n1√ó4 adjoint(::Vector{Float64}) with eltype Float64:\n 2.0  6.0  1.0  0.0\n\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.stoich_molar_fuel_oxy_ratio","page":"Combustion","title":"IdealGasThermo.stoich_molar_fuel_oxy_ratio","text":"stoich_molar_fuel_oxy_ratio(fuel::AbstractString)\n\nCalculates the molar fuel-oxygen ratio for stoichiometric combustion.\n\nExamples\n\njulia> using IdealGasThermo\n\njulia> IdealGasThermo.stoich_molar_fuel_oxy_ratio(\"CH4\")\n0.5\n\njulia> IdealGasThermo.stoich_molar_fuel_oxy_ratio(\"C12H23\")\n0.056338028169014086\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.stoich_molar_FOR","page":"Combustion","title":"IdealGasThermo.stoich_molar_FOR","text":"stoich_molar_FOR(fuel::AbstractSpecies, oxidizer::AbstractSpecies)\n\nCalculates the molar fuel-oxidizer ratio for stoichiometeric combustion for  and arbitrary fuel and oxidizer.\n\nExamples\n\njulia> CH4 = species_in_spdict(\"CH4\");\n\njulia> IdealGasThermo.stoich_molar_FOR(CH4)\n0.104738\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.stoich_FOR","page":"Combustion","title":"IdealGasThermo.stoich_FOR","text":"stoich_FOR(fuel::AbstractSpecies, oxidizer::AbstractSpecies=DryAir)\n\nCalculates the mass fuel-oxidizer ratio for stoichiometeric combustion for  and arbitrary fuel and oxidizer.\n\nExamples\n\njulia> IdealGasThermo.stoich_FOR(CH4)\n0.05800961333050494\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.reaction_change_fraction","page":"Combustion","title":"IdealGasThermo.reaction_change_fraction","text":"reaction_change_fraction(fuel::String)\n\nReturns the mass fraction change due to complete combustion\n\nAssume fuel of type  C·µ¢H‚±ºO‚ÇñN‚Çó , then\n\n  C·µ¢H‚±ºO‚ÇñN‚Çó + n(O2) * O2 ---> n(CO2)*CO2 + n(H2O)*H2O + n(N2)*N2\n‚üπC·µ¢H‚±ºO‚ÇñN‚Çó              ---> n(CO2)*CO2 + n(H2O)*H2O + n(N2)*N2 - n(O2)*O2 \n\nExamples\n\njulia> reaction_change_fraction(\"CH4\")\nDict{String, Float64} with 4 entries:\n  \"O2\"  => -3.98926\n  \"H2O\" => 2.24595\n  \"CO2\" => 2.74331\n  \"N2\"  => 0.0\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.reaction_change_molar_fraction","page":"Combustion","title":"IdealGasThermo.reaction_change_molar_fraction","text":"reaction_change_molar_fraction(fuel::AbstractString)\n\nReturns the mole fraction change due to complete combustion of one mole of the specified fuel\n\nAssume fuel of type  C·µ¢H‚±ºO‚ÇñN‚Çó , then\n\n    C·µ¢H‚±ºO‚ÇñN‚Çó + n(O2) * O2 ---> n(CO2)*CO2 + n(H2O)*H2O + n(N2)*N2\n   ‚üπC·µ¢H‚±ºO‚ÇñN‚Çó              ---> n(CO2)*CO2 + n(H2O)*H2O + n(N2)*N2 - n(O2)*O2 \n\nExamples\n\njulia> IdealGasThermo.reaction_change_molar_fraction(\"CH4\")\n4-element Vector{Float64}:\n  1.0\n  0.0\n  2.0\n -2.0\n\n\n\n\n\n","category":"function"},{"location":"combustion/#vitiated","page":"Combustion","title":"Vitiated gas composition","text":"","category":"section"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"If we consider lean combustion (i.e., more oxygen present than required  to completely react with the fuel) we can write the above equation for some molar fuel-oxygen (or more generally oxidizer) ratio (f leq f_mathrmstoich) as follows","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"\nbeginaligned\nf times\ngenfuel+ \n1times mathrmO_2 \nlongrightarrow \n\n  f n_mathrmCO_2 mathrmCO_2 \n+ f n_mathrmH_2mathrmO mathrmH_2mathrmO \n+ f n_mathrmN_2 mathrmN_2 \n+left(1 - fn_mathrmO_2right) mathrmO_2 \n\n\n\nf times\ngenfuel + \n1times mathrmO_2 \n\nlongrightarrow \n\n  f x_mathrmC mathrmCO_2 \n+ f fracx_mathrmH2 mathrmH_2mathrmO \n+ f fracx_mathrmN2mathrmN_2 \n+left(1 - fracff_mathrmstoichright)mathrmO_2\n\nendaligned","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"where fst = 1n_mathrmO_2 for oxy-combustion. More generally for some oxidzer that has X_rmO_2 moles of oxygen per mole of oxidizer,","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"beginaligned\nf\ngenfuel + \nmathrmOxidizer\n\nlongrightarrow \n\n  f x_mathrmC mathrmCO_2 \n+ f fracx_mathrmH2 mathrmH_2mathrmO \n+ f fracx_mathrmN2mathrmN_2 \n+mathrmOxidizer\n - left(fracf X_mathrmO_2fstright)mathrmO_2\nendaligned","category":"page"},{"location":"combustion/","page":"Combustion","title":"Combustion","text":"IdealGasThermo.vitiated_mixture\nIdealGasThermo.vitiated_species\nIdealGasThermo.fixed_fuel_vitiated_species","category":"page"},{"location":"combustion/#IdealGasThermo.vitiated_mixture","page":"Combustion","title":"IdealGasThermo.vitiated_mixture","text":"vitiated_mixture(fuel::AbstractSpecies, oxidizer::AbstractSpecies, \nFAR::Float64, Œ∑burn::Float64=1.0)\n\nCalculates the composition of a burnt gas mixture. Defaults to stoichiometric  conditions if FAR is not specified. vitiated_mixture returns the number of  moles of each species present in the burnt gas mixture after combustion at the  specified FAR. Note the sum of result in general will not sum to 1. \n\nExamples\n\njulia> CH4 = species_in_spdict(\"CH4\");\n\njulia> Air = IdealGasThermo.DryAir;\n\njulia> IdealGasThermo.vitiated_mixture(CH4, Air, 0.04)\nDict{Any, Any} with 6 entries:\n  \"O2\"  => 0.0650337\n  \"CH4\" => 0.0\n  \"Ar\"  => 0.009365\n  \"H2O\" => 0.144442\n  \"CO2\" => 0.0725401\n  \"N2\"  => 0.78084\n\njulia> IdealGasThermo.vitiated_mixture(CH4, Air)\nDict{Any, Any} with 6 entries:\n  \"O2\"  => 0.0\n  \"CH4\" => 0.0\n  \"Ar\"  => 0.009365\n  \"H2O\" => 0.209476\n  \"CO2\" => 0.105057\n  \"N2\"  => 0.78084\n\nSee here for some explanation of the background.\n\n\n\n\n\nvitiated_mixture(fuel::AbstractString, oxidizer::AbstractString, \nFAR::Float64, Œ∑burn::Float64=1.0)\n\nConvenience function that finds fuel and oxidizer from thermo database\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.vitiated_species","page":"Combustion","title":"IdealGasThermo.vitiated_species","text":"vitiated_species(fuel::AbstractSpecies, oxidizer::AbstractSpecies, \nFAR::Float64, Œ∑burn::Float64=1.0, name::AbstractString=\"vitiated species\")\n\nReturns a composite_species that represents the burnt gas mixture at the specified FAR. If no FAR is provided stoichiometeric conditions are assumed. \n\nExamples\n\njulia> IdealGasThermo.vitiated_species(CH4, Air, 0.05, name = \"CH4-Air-0.05\")\nComposite Species: \"CH4-Air-0.05\"\nMW = 27.89510190126262 g/mol\nwith composition:\n Species        X·µ¢\n      O2   0.02653\n      Ar   0.00859\n     H2O   0.16560\n     CO2   0.08309\n      N2   0.71619\n------------------\n       Œ£   1.00000\n\n\n\n\n\n","category":"function"},{"location":"combustion/#IdealGasThermo.fixed_fuel_vitiated_species","page":"Combustion","title":"IdealGasThermo.fixed_fuel_vitiated_species","text":"fixed_fuel_vitiated_species(fuel, oxidizer, Œ∑burn::Float64=1.0)\n\nReturns a function burntgas(FAR::Float64) that is specific to the fuel and oxidizer combination provided. This gives a highly performant function that can  simply be called at any given FAR for that specific fuel+oxidizer combo.\n\nThis is ~4x faster than doing  burntgas(FAR) = vitiated_species(\"CH4\", \"Air\", FAR)\n\nExamples\n\njulia> burntgas = IdealGasThermo.fixed_fuel_vitiated_species(CH4, Air)\n(::IdealGasThermo.var\"#burntgas#52\"{species, composite_species, Vector{Float64}, Vector{Float64}, Float64}) (generic function with 1 method)\n\njulia> burntgas(0.05)\nComposite Species: \"burntgas(CH4 + Dry Air; 0.05)\"\nMW = 27.89510190126262 g/mol\nwith composition:\n Species        X·µ¢\n      O2   0.02653\n      Ar   0.00859\n     H2O   0.16560\n     CO2   0.08309\n      N2   0.71619\n------------------\n       Œ£   1.00000\n\njulia> gas1 = Gas1D(burntgas(0.02)) #Returns a Gas1D intialized with the burnt gas properties\nGas1D(burntgas(CH4 + Dry Air; 0.02); MW = 28.51473501878705 g/mol)\nat T = 298.15 K; P = 101.325 kPa\n\n\n\n\n\n","category":"function"},{"location":"benchmark/#performance","page":"Performance benchmarks","title":"Performance","text":"","category":"section"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"In general calculating the thermodynamic properties of a mixture scales with the number of constituent species.  The key feature of IdealGasThermo.jl is the ability to represent a mixture of gases as a single composite_species which can provide noticable performance improvements.","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"Below is an example. We first create a function that sets the gas temp 100 times and calculates c_p, h, phi, and dc_pdT. We do this so that ","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"TT = rand(200.:600., 100)\n\nfunction benchmark_Gas(TT::AbstractVector, gas::AbstractGas)\n    @views for i in eachindex(TT)\n        gas.T = TT[i]; \n        gas.cp\n        gas.œï\n        gas.h\n        gas.cp_T\n    end\nend","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"We now initialze a Gas and Gas1D instances and benchmark the above function.","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"gas = Gas()\ngas1D = Gas1D()\n\nusing BenchmarkTools\n\njulia> @benchmark benchmark_Gas($TT, $gas1D)\nBenchmarkTools.Trial: 10000 samples with 9 evaluations.\n Range (min ‚Ä¶ max):  2.778 Œºs ‚Ä¶  12.551 Œºs  ‚îä GC (min ‚Ä¶ max): 0.00% ‚Ä¶ 0.00%\n Time  (median):     2.884 Œºs               ‚îä GC (median):    0.00%\n Time  (mean ¬± œÉ):   2.909 Œºs ¬± 202.135 ns  ‚îä GC (mean ¬± œÉ):  0.00% ¬± 0.00%\n\n  ‚ñÇ‚ñà‚ñÖ‚ñÖ ‚ñÑ‚ñá‚ñá‚ñÖ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÅ                                            ‚ñÇ\n  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÜ‚ñÜ‚ñá‚ñá‚ñÜ‚ñÜ‚ñÜ‚ñà‚ñà‚ñÜ‚ñÜ‚ñá‚ñá‚ñà‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñÜ‚ñá‚ñÜ‚ñÜ‚ñÖ‚ñÜ‚ñÜ‚ñÖ‚ñÖ‚ñÜ‚ñÑ‚ñÜ‚ñÑ‚ñÜ‚ñÖ‚ñÜ‚ñÖ‚ñÜ‚ñÜ‚ñÜ‚ñÖ‚ñÑ‚ñÜ ‚ñà\n  2.78 Œºs      Histogram: log(frequency) by time      3.74 Œºs <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\njulia> @benchmark benchmark_Gas($TT, $gas)\nBenchmarkTools.Trial: 10000 samples with 4 evaluations.\n Range (min ‚Ä¶ max):  7.604 Œºs ‚Ä¶  13.541 Œºs  ‚îä GC (min ‚Ä¶ max): 0.00% ‚Ä¶ 0.00%\n Time  (median):     7.667 Œºs               ‚îä GC (median):    0.00%\n Time  (mean ¬± œÉ):   7.922 Œºs ¬± 561.794 ns  ‚îä GC (mean ¬± œÉ):  0.00% ¬± 0.00%\n\n  ‚ñà‚ñà‚ñÇ ‚ñÇ‚ñÑ‚ñÖ‚ñÑ‚ñÖ‚ñÉ‚ñÅ‚ñÇ‚ñÇ‚ñÇ                                              ‚ñÇ\n  ‚ñà‚ñà‚ñà‚ñÜ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñá‚ñá‚ñá‚ñà‚ñá‚ñá‚ñá‚ñá‚ñà‚ñá‚ñÜ‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñá‚ñÜ‚ñá‚ñÜ‚ñá‚ñá‚ñá‚ñÜ‚ñá‚ñá‚ñá‚ñÜ‚ñá‚ñÜ‚ñá‚ñÜ‚ñÜ‚ñá‚ñá‚ñÜ‚ñÜ‚ñá‚ñá‚ñá‚ñÜ‚ñÖ‚ñÖ ‚ñà\n  7.6 Œºs       Histogram: log(frequency) by time      10.2 Œºs <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"We see that the Gas1D calculations are ~3x faster. If we repeat this with a mixture that has more species the time taken for the Gas type calculation roughly scales with the number of species where as the Gas1D type calculations are independent of the number of constituent species in the gas.","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"For 10 components:","category":"page"},{"location":"benchmark/","page":"Performance benchmarks","title":"Performance benchmarks","text":"julia> @benchmark benchmark_Gas($TT, $gas)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min ‚Ä¶ max):  17.208 Œºs ‚Ä¶ 149.167 Œºs  ‚îä GC (min ‚Ä¶ max): 0.00% ‚Ä¶ 0.00%\n Time  (median):     17.875 Œºs               ‚îä GC (median):    0.00%\n Time  (mean ¬± œÉ):   18.134 Œºs ¬±   1.755 Œºs  ‚îä GC (mean ¬± œÉ):  0.00% ¬± 0.00%\n\n  ‚ñÇ‚ñÉ‚ñÅ  ‚ñÅ‚ñà‚ñá‚ñÖ‚ñÉ‚ñÇ‚ñÉ‚ñÑ‚ñÑ‚ñÉ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÉ‚ñÅ                                       ‚ñÇ\n  ‚ñà‚ñà‚ñà‚ñÜ‚ñÖ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñá‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÖ‚ñÖ‚ñÖ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÉ‚ñÖ‚ñÅ‚ñÖ‚ñÖ‚ñÜ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÖ‚ñÖ‚ñÑ‚ñÖ‚ñÜ‚ñÜ ‚ñà\n  17.2 Œºs       Histogram: log(frequency) by time      22.6 Œºs <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\njulia> @benchmark benchmark_Gas($TT, $gas1D)\nBenchmarkTools.Trial: 10000 samples with 9 evaluations.\n Range (min ‚Ä¶ max):  2.792 Œºs ‚Ä¶  13.907 Œºs  ‚îä GC (min ‚Ä¶ max): 0.00% ‚Ä¶ 0.00%\n Time  (median):     2.903 Œºs               ‚îä GC (median):    0.00%\n Time  (mean ¬± œÉ):   2.958 Œºs ¬± 233.528 ns  ‚îä GC (mean ¬± œÉ):  0.00% ¬± 0.00%\n\n  ‚ñÅ‚ñÅ   ‚ñà‚ñá‚ñÜ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÇ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÅ                                         ‚ñÅ\n  ‚ñà‚ñà‚ñá‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñá‚ñÖ‚ñÖ‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñÑ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñÜ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñÖ‚ñÜ‚ñÜ‚ñÜ‚ñÖ‚ñá‚ñÖ‚ñÜ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÜ ‚ñà\n  2.79 Œºs      Histogram: log(frequency) by time      3.75 Œºs <\n\n Memory estimate: 0 bytes, allocs estimate: 0.","category":"page"},{"location":"#IdealGasThermo.jl-Documentation","page":"Home","title":"IdealGasThermo.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IdealGasThermo.jl is a tool for fast thermodynamic properties calculations for ideal gases. This assumes that the specifc heat of the gas/mixture is only a function of its temperature, i.e., c_p(T) ,  h(T), and s(Tp) (note the entropy is a function of both pressure and temperature).","category":"page"},{"location":"","page":"Home","title":"Home","text":"One of the important features of IdealGasThermo.jl is the ability to represent a mixture of gases as a single composite_species.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several workflows that are possible to use IdealGasThermo.jl. We outline here the most common few.","category":"page"},{"location":"#Simple-install","page":"Home","title":"Simple install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The easiest way to run IdealGasThermo.jl would be to add the package using the julia package manager using the github repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can do this by starting a Julia session and then activating the package manager by typing ] and then entering:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add \"https://github.com/MIT-LAE/IdealGasThermo.jl.git\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can then import IdealGasThermo as you would with any Julia package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using IdealGasThermo","category":"page"},{"location":"#Local-development","page":"Home","title":"Local development","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are going to develop the source code of IdealGasThermo.jl you might benefit from a local clone of the git repository which can then fit into a workflow using Revise.jl for example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Step 1: Clone the git repo locally","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/MIT-LAE/IdealGasThermo.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Step 2: cd to the folder where IdealGasThermo is cloned","category":"page"},{"location":"","page":"Home","title":"Home","text":"Step 3: Use Pkg to install/ develop the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> dev .","category":"page"},{"location":"","page":"Home","title":"Home","text":"You should now be able to import IdealGasThermo from within any Julia script in your base environment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nIf you are using Revise.jl be sure to first import Revise before importing IdealGasThermousing Revise\nusing IdealGasThermo","category":"page"},{"location":"readthermo/#Reading-thermodynamic-data","page":"Thermodynamic Data","title":"Reading thermodynamic data","text":"","category":"section"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"IdealGasThermo.jl uses the NASA-9 polynomials to calculate the thermodynamic properties (c_p h s)","category":"page"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"readThermo","category":"page"},{"location":"readthermo/#IdealGasThermo.readThermo","page":"Thermodynamic Data","title":"IdealGasThermo.readThermo","text":"readThermo(filename)\n\nReads a NASA 9 polynomial thermo definintion file which can be obtained from NASA thermobuild  and returns a dictionary of species.\n\nSee here  for typical data format\n\nUsage: If a NASA 9 polynomial definition file thermo.inp exists then,\n\nspec = readThermo(\"thermo.inp\")\n\nwill return a dictionary of species.\n\nreadThermo only considers 2 temperature ranges  (typically 200-1000 K and 1000-6000 K) but more can be added if needed.\n\n\n\n\n\n","category":"function"},{"location":"readthermo/#Default-species-included","page":"Thermodynamic Data","title":"Default species included","text":"","category":"section"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"A number of species of interest are included in IdealGasThermo.jl.","category":"page"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"using IdealGasThermo #hide\nprintln(IdealGasThermo.spdict.name) #hide","category":"page"},{"location":"readthermo/#Adding-new-species","page":"Thermodynamic Data","title":"Adding new species","text":"","category":"section"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"Any new gaseous species can be added for calculations by adding the NASA-9 polynomial data to the thermo.inp file. For example, if you wanted to add methane (this already exists in the database so you don't need to):","category":"page"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"Step 1: Go to the thermobuild.\nStep 2: Copy the data for the species of interest","category":"page"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"   CH4               Gurvich,1991 pt1 p44 pt2 p36.                                 \n 2 g 8/99 C   1.00H   4.00    0.00    0.00    0.00 0   16.0424600     -74600.000\n    200.000   1000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0        10016.202\n-1.766850998D+05 2.786181020D+03-1.202577850D+01 3.917619290D-02-3.619054430D-05\n 2.026853043D-08-4.976705490D-12                -2.331314360D+04 8.904322750D+01\n   1000.000   6000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0        10016.202\n 3.730042760D+06-1.383501485D+04 2.049107091D+01-1.961974759D-03 4.727313040D-07\n-3.728814690D-11 1.623737207D-15                 7.532066910D+04-1.219124889D+02","category":"page"},{"location":"readthermo/","page":"Thermodynamic Data","title":"Thermodynamic Data","text":"Step 3: Append this to thermo.inp","category":"page"}]
}
